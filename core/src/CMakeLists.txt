
enable_language(CXX)

# set files
set(core_files
    AutoGeneratedCoreWrapper.cpp
    BaseObject.h
    BaseObject.cpp
    Configuration.h
    Configuration.cpp
    Core.h
    Core.cpp
    FPS.h
    FPS.cpp
    Common/Array.h
    Common/Resource.h
    Common/ResourceContainer.h
    Common/Resources.h
    Common/Resources.cpp
    Common/StringHelper.h
    Common/Assertion.h
    Common/ThreadSafeMap.h
    Common/BinaryWriter.h
    Common/BinaryReader.h
    Common/HashHelper.h
    Graphics/BatchRenderer.h
    Graphics/BatchRenderer.cpp
    Graphics/BuiltinShader.h
    Graphics/BuiltinShader.cpp
    Graphics/Color.h
    Graphics/Color.cpp
    Graphics/CommandList.h
    Graphics/CommandList.cpp
    Graphics/Font.h
    Graphics/Font.cpp
    Graphics/FrameDebugger.h
    Graphics/FrameDebugger.cpp
    Graphics/ImageFont.h
    Graphics/ImageFont.cpp
    Graphics/Graphics.h
    Graphics/Graphics.cpp
    Graphics/LLGIWindow.h
    Graphics/LLGIWindow.cpp
    Graphics/Material.h
    Graphics/Material.cpp
    Graphics/RenderTexture.h
    Graphics/RenderTexture.cpp
    Graphics/Renderer/Rendered.h
    Graphics/Renderer/Rendered.cpp
    Graphics/Renderer/RenderedCamera.h
    Graphics/Renderer/RenderedCamera.cpp
    Graphics/Renderer/RenderedSprite.h
    Graphics/Renderer/RenderedSprite.cpp
    Graphics/Renderer/RenderedText.h
    Graphics/Renderer/RenderedText.cpp
    Graphics/Renderer/RenderedPolygon.h
    Graphics/Renderer/RenderedPolygon.cpp
    Graphics/Renderer/Renderer.h
    Graphics/Renderer/Renderer.cpp
    Graphics/Renderer/CullingSystem.h
    Graphics/Renderer/CullingSystem.cpp
    Graphics/Shader.h
    Graphics/Shader.cpp
    Graphics/ShaderCompiler/ShaderCompiler.h
    Graphics/ShaderCompiler/ShaderCompiler.cpp
    Graphics/Texture2D.h
    Graphics/Texture2D.cpp
    Graphics/TextureBase.h
    Graphics/TextureBase.cpp
    IO/BaseFileReader.h
    IO/BaseFileReader.cpp
    IO/File.h
    IO/File.cpp
    IO/FileRoot.h
    IO/FileRoot.cpp
    IO/PackFile.h
    IO/PackFile.cpp
    IO/PackFileReader.h
    IO/PackFileReader.cpp
    IO/StaticFile.h
    IO/StaticFile.cpp
    IO/StreamFile.h
    IO/StreamFile.cpp
    Input/ButtonState.h
    Input/Cursor.h
    Input/Cursor.cpp
    Input/Joystick.h
    Input/Joystick.cpp
    Input/Keyboard.h
    Input/Keyboard.cpp
    Input/Mouse.h
    Input/Mouse.cpp
    Logger/Log.h
    Logger/Log.cpp
    Math/Easing.h
    Math/Easing.cpp
    Math/MathTemplate.h
    Math/Matrix33F.h
    Math/Matrix33F.cpp
    Math/Matrix33I.h
    Math/Matrix33I.cpp
    Math/Matrix44F.h
    Math/Matrix44F.cpp
    Math/Matrix44I.h
    Math/Matrix44I.cpp
    Math/RectF.h
    Math/RectF.cpp
    Math/RectI.h
    Math/RectI.cpp
    Math/Vector2F.h
    Math/Vector2F.cpp
    Math/Vector2I.h
    Math/Vector2I.cpp
    Math/Vector3F.h
    Math/Vector3F.cpp
    Math/Vector3I.h
    Math/Vector3I.cpp
    Math/Vector4F.h
    Math/Vector4F.cpp
    Math/Vector4I.h
    Math/Vector4I.cpp
    Physics/Collider/Box2DHelper.h
    Physics/Collider/Box2DHelper.cpp
    Physics/Collider/Collider.h
    Physics/Collider/Collider.cpp
    Physics/Collider/CircleCollider.h
    Physics/Collider/CircleCollider.cpp
    Physics/Collider/EdgeCollider.h
    Physics/Collider/EdgeCollider.cpp
    Physics/Collider/PolygonCollider.h
    Physics/Collider/PolygonCollider.cpp
    Physics/Collider/ShapeCollider.h
    Physics/Collider/ShapeCollider.cpp
    Platform/FileSystem.h
    Sound/Sound.h
    Sound/Sound.cpp
    Sound/SoundMixer.h
    Sound/SoundMixer.cpp
    Tool/Tool.h
    Tool/Tool.cpp
    Tool/AutoGenerateTool.cpp
    Window/Window.h
    Window/Window.cpp
    System/SynchronizationContext.h
    System/SynchronizationContext.cpp
)

# imgui

if(WIN32)
    list(APPEND
        core_files
        Tool/Platform/ImGuiPlatformDX12.h
    )
elseif(APPLE)
    list(APPEND
        core_files
        Tool/Platform/ImGuiPlatformMetal.h
        Tool/Platform/ImGuiPlatformMetal.mm)
endif()

if(BUILD_VULKAN)
    list(APPEND
        core_files
        Tool/Platform/ImGuiPlatformVulkan.h
        Tool/Platform/ImGuiPlatformVulkan.cpp)
endif()


if(WIN32)

    list(APPEND core_files
        Platform/FileSystemWin.cpp
    )

elseif(APPLE)

    list(APPEND core_files
        Platform/FileSystemMac.cpp
    )

else()

    list(APPEND core_files
        Platform/FileSystemLinux.cpp
    )

endif()

# specify project filters
foreach(FILE ${core_files}) 
    # Get the directory of the source file
    get_filename_component(PARENT_DIR "${FILE}" DIRECTORY)

    # Remove common directory prefix to make the group
    string(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}" "" GROUP "${PARENT_DIR}")

    # Make sure we are using windows slashes
    string(REPLACE "/" "\\" GROUP "${GROUP}")

    # Group into "Source Files" and "Header Files"
    if ("${FILE}" MATCHES ".*\\.cpp")
         set(GROUP "Files\\${GROUP}")
    elseif("${FILE}" MATCHES ".*\\.c")
         set(GROUP "Files\\${GROUP}")
    elseif("${FILE}" MATCHES ".*\\.cxx")
         set(GROUP "Files\\${GROUP}")
    elseif("${FILE}" MATCHES ".*\\.h")
         set(GROUP "Files\\${GROUP}")
    elseif("${FILE}" MATCHES ".*\\.mm")
        set(GROUP "Files\\${GROUP}")
    endif()

    source_group("${GROUP}" FILES "${FILE}")
endforeach()


# create dll
add_library(Altseed2_Core
    SHARED
    ${core_files}
)

target_link_libraries(
    Altseed2_Core
    PRIVATE
    spdlog
    hidapi
    LLGI
    OpenSoundMixer
    zip
    imgui
    nativefiledialog
    box2d
    ShaderTranspilerCore
    debug "${LIBPNG_LIB_DEBUG}"
    optimized "${LIBPNG_LIB_RELEASE}"

    debug "${GLFW3_LIB_DEBUG}"
    optimized "${GLFW3_LIB_RELEASE}"

    debug freetyped
    optimized freetype

    debug msdfgend
    optimized msdfgen
)

if (MSVC)

    target_link_libraries(
        Altseed2_Core
        PRIVATE
        debug zlibstaticd
        optimized zlibstatic
    )

elseif(APPLE)

    find_library(OPEN_AL OpenAL)
    find_library(COCOA_FRAMEWORK Cocoa)
    find_library(IOKIT_FRAMEWORK IOKit)
    find_library(CORE_FOUNDATION_FRAMEWORK CoreFoundation)
    find_library(CORE_VIDEO_FRAMEWORK CoreVideo)
    find_library(COCOA_LIBRARY Cocoa)
    find_library(METAL_LIBRARY Metal)
    find_library(APPKIT_LIBRARY AppKit)
    find_library(METALKIT_LIBRARY MetalKit)
    find_library(QUARTZ_CORE_LIBRARY QuartzCore)

    target_link_libraries(
        Altseed2_Core
        PRIVATE
        z
        ${OPEN_AL}
        ${COCOA_FRAMEWORK}
        ${IOKIT_FRAMEWORK}
        ${CORE_FOUNDATION_FRAMEWORK}
        ${CORE_VIDEO_FRAMEWORK}
        ${APPKIT_LIBRARY}
        ${METAL_LIBRARY}
        ${METALKIT_LIBRARY}
        ${QUARTZ_CORE_LIBRARY}
    )

else()
    FIND_PACKAGE(PkgConfig REQUIRED)
    PKG_CHECK_MODULES(GTK3 REQUIRED gtk+-3.0)
    find_package(X11 REQUIRED)
    target_link_libraries(Altseed2_Core 
        PRIVATE
        ${X11_LIBRARIES}
        ${GTK3_LIBRARIES})

    target_link_libraries(
        Altseed2_Core
        PRIVATE
        z
        stdc++fs
        ssl
        crypto
        X11
        X11-xcb
        )
endif()

if(MSVC)

else()
    find_package(Threads REQUIRED)
    target_link_libraries(Altseed2_Core PRIVATE ${CMAKE_THREAD_LIBS_INIT})
endif()

# to use external projects
target_include_directories(
    Altseed2_Core 
    PRIVATE 
    ${THIRDPARTY_INCLUDES})

# to use external projects
target_link_directories(
    Altseed2_Core
    PRIVATE
    ${THIRDPARTY_LIBRARY_DIRECTORIES})

# specify dependencies about external projects. 
# It is required to use external projects in addition of target_link_libraries
add_dependencies(
    Altseed2_Core
    EP_glfw
    EP_zlib
    EP_libpng
    EP_libzip
    EP_msdfgen
    box2d
    nativefiledialog)

# export all functions to out of dll for testing
SET_TARGET_PROPERTIES(Altseed2_Core PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)

# make c++17 enabled
SET_TARGET_PROPERTIES(Altseed2_Core PROPERTIES CXX_STANDARD 17)

clang_format(Altseed2_Core)
clang_tidy(Altseed2_Core)
