# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
- master

jobs:
  - job: Windows
    pool:
      vmImage: 'windows-2019'
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            git submodule update --init
            cd thirdparty/LLGI
            git submodule update --init
            cd ../..
            git lfs install
            git lfs pull

      - task: CMake@1
        inputs:
          cmakeArgs: '.. -G "Visual Studio 16 2019" -A x64 -DBUILD_TEST=ON'

      - task: CMake@1
        inputs:
          cmakeArgs: '--build . --config Release'

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            cd build/RELEASE/
            .\Altseed2_Core_Test.exe --gtest_filter='-Sound.*'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'build/RELEASE'
          ArtifactName: 'screenshots'
          publishLocation: 'Container'

  - job: Linux
    pool:
      vmImage: 'ubuntu-20.04'

    steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
            sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-focal.list http://packages.lunarg.com/vulkan/lunarg-vulkan-focal.list
            sudo apt update
            sudo apt -y install vulkan-sdk clang-format clang-tidy libgraphite2-dev
            
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            wget https://github.com/harfbuzz/harfbuzz/releases/download/2.7.1/harfbuzz-2.7.1.tar.xz
            tar Jxfv harfbuzz-2.7.1.tar.xz
            cd harfbuzz-2.7.1
            sudo ./configure --prefix=/usr --with-gobject --with-graphite2 &&
            sudo make
            sudo make install


      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            pip3 install chardet
            cd .ci
            python3 check_format.py

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            curl -sL https://cmake.org/files/v3.15/cmake-3.15.3-Linux-x86_64.sh -o cmakeinstall.sh
            chmod +x cmakeinstall.sh
            sudo ./cmakeinstall.sh --prefix=/usr/local --exclude-subdir
            rm cmakeinstall.sh
            git submodule update --init
            cd thirdparty/LLGI
            git submodule update --init
            cd ../..
            git lfs install
            git lfs pull
            sudo apt -y install libx11-dev libxrandr-dev libxi-dev libxinerama-dev libxcursor-dev libudev-dev libx11-xcb-dev
            sudo apt -y install libssl-dev
            sudo apt -y install libglu1-mesa-dev mesa-common-dev
            sudo apt -y install libpulse-dev
            sudo apt -y install libgtk-3-dev

      - task: CMake@1
        inputs:
          cmakeArgs: '.. -DBUILD_TEST=ON -D CLANG_TIDY_ENABLED=ON'

      - task: CMake@1
        inputs:
          cmakeArgs: '--build . --config Release'

  - job: MacOS
    pool:
      vmImage: 'macOS-13'
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            git submodule update --init
            cd thirdparty/LLGI
            git submodule update --init
            cd ../..
            git lfs install
            git lfs pull
      - task: CMake@1
        inputs:
          cmakeArgs: '.. -G "Xcode" -DBUILD_TEST=ON'
      - task: CMake@1
        inputs:
          cmakeArgs: '--build . --config Release'
